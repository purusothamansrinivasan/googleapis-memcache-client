/*
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MemcacheParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Node
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T15:33:03.624322+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class Node {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nullable
  private String host;

  public static final String SERIALIZED_NAME_MEMCACHE_FULL_VERSION = "memcacheFullVersion";
  @SerializedName(SERIALIZED_NAME_MEMCACHE_FULL_VERSION)
  @javax.annotation.Nullable
  private String memcacheFullVersion;

  /**
   * Output only. Major version of memcached server running on this node, e.g. MEMCACHE_1_5
   */
  @JsonAdapter(MemcacheVersionEnum.Adapter.class)
  public enum MemcacheVersionEnum {
    MEMCACHE_VERSION_UNSPECIFIED("MEMCACHE_VERSION_UNSPECIFIED"),
    
    MEMCACHE_1_5("MEMCACHE_1_5"),
    
    MEMCACHE_1_6_15("MEMCACHE_1_6_15");

    private String value;

    MemcacheVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemcacheVersionEnum fromValue(String value) {
      for (MemcacheVersionEnum b : MemcacheVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MemcacheVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemcacheVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemcacheVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MemcacheVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MemcacheVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMCACHE_VERSION = "memcacheVersion";
  @SerializedName(SERIALIZED_NAME_MEMCACHE_VERSION)
  @javax.annotation.Nullable
  private MemcacheVersionEnum memcacheVersion;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  @javax.annotation.Nullable
  private String nodeId;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  @javax.annotation.Nullable
  private MemcacheParameters parameters;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nullable
  private Integer port;

  /**
   * Output only. Current state of the Memcached node.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    DELETING("DELETING"),
    
    UPDATING("UPDATING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_AVAILABLE = "updateAvailable";
  @SerializedName(SERIALIZED_NAME_UPDATE_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean updateAvailable;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  @javax.annotation.Nullable
  private String zone;

  public Node() {
  }

  public Node(
     String host, 
     String memcacheFullVersion, 
     MemcacheVersionEnum memcacheVersion, 
     String nodeId, 
     Integer port, 
     StateEnum state, 
     Boolean updateAvailable, 
     String zone
  ) {
    this();
    this.host = host;
    this.memcacheFullVersion = memcacheFullVersion;
    this.memcacheVersion = memcacheVersion;
    this.nodeId = nodeId;
    this.port = port;
    this.state = state;
    this.updateAvailable = updateAvailable;
    this.zone = zone;
  }

  /**
   * Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }



  /**
   * Output only. The full version of memcached server running on this node. e.g. - memcached-1.5.16
   * @return memcacheFullVersion
   */
  @javax.annotation.Nullable
  public String getMemcacheFullVersion() {
    return memcacheFullVersion;
  }



  /**
   * Output only. Major version of memcached server running on this node, e.g. MEMCACHE_1_5
   * @return memcacheVersion
   */
  @javax.annotation.Nullable
  public MemcacheVersionEnum getMemcacheVersion() {
    return memcacheVersion;
  }



  /**
   * Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }



  public Node parameters(@javax.annotation.Nullable MemcacheParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public MemcacheParameters getParameters() {
    return parameters;
  }

  public void setParameters(@javax.annotation.Nullable MemcacheParameters parameters) {
    this.parameters = parameters;
  }


  /**
   * Output only. The port number of the Memcached server on this node.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }



  /**
   * Output only. Current state of the Memcached node.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Returns true if there is an update waiting to be applied
   * @return updateAvailable
   */
  @javax.annotation.Nullable
  public Boolean getUpdateAvailable() {
    return updateAvailable;
  }



  /**
   * Output only. Location (GCP Zone) for the Memcached node.
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.host, node.host) &&
        Objects.equals(this.memcacheFullVersion, node.memcacheFullVersion) &&
        Objects.equals(this.memcacheVersion, node.memcacheVersion) &&
        Objects.equals(this.nodeId, node.nodeId) &&
        Objects.equals(this.parameters, node.parameters) &&
        Objects.equals(this.port, node.port) &&
        Objects.equals(this.state, node.state) &&
        Objects.equals(this.updateAvailable, node.updateAvailable) &&
        Objects.equals(this.zone, node.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, memcacheFullVersion, memcacheVersion, nodeId, parameters, port, state, updateAvailable, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    memcacheFullVersion: ").append(toIndentedString(memcacheFullVersion)).append("\n");
    sb.append("    memcacheVersion: ").append(toIndentedString(memcacheVersion)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateAvailable: ").append(toIndentedString(updateAvailable)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("host", "memcacheFullVersion", "memcacheVersion", "nodeId", "parameters", "port", "state", "updateAvailable", "zone"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Node
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Node is not found in the empty JSON string", Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("memcacheFullVersion") != null && !jsonObj.get("memcacheFullVersion").isJsonNull()) && !jsonObj.get("memcacheFullVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memcacheFullVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memcacheFullVersion").toString()));
      }
      if ((jsonObj.get("memcacheVersion") != null && !jsonObj.get("memcacheVersion").isJsonNull()) && !jsonObj.get("memcacheVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memcacheVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memcacheVersion").toString()));
      }
      // validate the optional field `memcacheVersion`
      if (jsonObj.get("memcacheVersion") != null && !jsonObj.get("memcacheVersion").isJsonNull()) {
        MemcacheVersionEnum.validateJsonElement(jsonObj.get("memcacheVersion"));
      }
      if ((jsonObj.get("nodeId") != null && !jsonObj.get("nodeId").isJsonNull()) && !jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        MemcacheParameters.validateJsonElement(jsonObj.get("parameters"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Node.class));

       return (TypeAdapter<T>) new TypeAdapter<Node>() {
           @Override
           public void write(JsonWriter out, Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Node given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Node
   * @throws IOException if the JSON string is invalid with respect to Node
   */
  public static Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Node.class);
  }

  /**
   * Convert an instance of Node to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

