/*
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for the given google.cloud.location.Location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T15:33:03.624322+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GoogleCloudMemcacheV1beta2LocationMetadata {
  public static final String SERIALIZED_NAME_AVAILABLE_ZONES = "availableZones";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ZONES)
  @javax.annotation.Nullable
  private Map<String, Object> availableZones = new HashMap<>();

  public GoogleCloudMemcacheV1beta2LocationMetadata() {
  }

  public GoogleCloudMemcacheV1beta2LocationMetadata(
     Map<String, Object> availableZones
  ) {
    this();
    this.availableZones = availableZones;
  }

  /**
   * Output only. The set of available zones in the location. The map is keyed by the lowercase ID of each zone, as defined by GCE. These keys can be specified in the &#x60;zones&#x60; field when creating a Memcached instance.
   * @return availableZones
   */
  @javax.annotation.Nullable
  public Map<String, Object> getAvailableZones() {
    return availableZones;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudMemcacheV1beta2LocationMetadata googleCloudMemcacheV1beta2LocationMetadata = (GoogleCloudMemcacheV1beta2LocationMetadata) o;
    return Objects.equals(this.availableZones, googleCloudMemcacheV1beta2LocationMetadata.availableZones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableZones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudMemcacheV1beta2LocationMetadata {\n");
    sb.append("    availableZones: ").append(toIndentedString(availableZones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("availableZones"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudMemcacheV1beta2LocationMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudMemcacheV1beta2LocationMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudMemcacheV1beta2LocationMetadata is not found in the empty JSON string", GoogleCloudMemcacheV1beta2LocationMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudMemcacheV1beta2LocationMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudMemcacheV1beta2LocationMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudMemcacheV1beta2LocationMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudMemcacheV1beta2LocationMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudMemcacheV1beta2LocationMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudMemcacheV1beta2LocationMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudMemcacheV1beta2LocationMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudMemcacheV1beta2LocationMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudMemcacheV1beta2LocationMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudMemcacheV1beta2LocationMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudMemcacheV1beta2LocationMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudMemcacheV1beta2LocationMetadata
   */
  public static GoogleCloudMemcacheV1beta2LocationMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudMemcacheV1beta2LocationMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudMemcacheV1beta2LocationMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

