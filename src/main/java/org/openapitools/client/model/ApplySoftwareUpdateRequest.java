/*
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request for ApplySoftwareUpdate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T15:33:03.624322+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class ApplySoftwareUpdateRequest {
  public static final String SERIALIZED_NAME_APPLY_ALL = "applyAll";
  @SerializedName(SERIALIZED_NAME_APPLY_ALL)
  @javax.annotation.Nullable
  private Boolean applyAll;

  public static final String SERIALIZED_NAME_NODE_IDS = "nodeIds";
  @SerializedName(SERIALIZED_NAME_NODE_IDS)
  @javax.annotation.Nullable
  private List<String> nodeIds = new ArrayList<>();

  public ApplySoftwareUpdateRequest() {
  }

  public ApplySoftwareUpdateRequest applyAll(@javax.annotation.Nullable Boolean applyAll) {
    this.applyAll = applyAll;
    return this;
  }

  /**
   * Whether to apply the update to all nodes. If set to true, will explicitly restrict users from specifying any nodes, and apply software update to all nodes (where applicable) within the instance.
   * @return applyAll
   */
  @javax.annotation.Nullable
  public Boolean getApplyAll() {
    return applyAll;
  }

  public void setApplyAll(@javax.annotation.Nullable Boolean applyAll) {
    this.applyAll = applyAll;
  }


  public ApplySoftwareUpdateRequest nodeIds(@javax.annotation.Nullable List<String> nodeIds) {
    this.nodeIds = nodeIds;
    return this;
  }

  public ApplySoftwareUpdateRequest addNodeIdsItem(String nodeIdsItem) {
    if (this.nodeIds == null) {
      this.nodeIds = new ArrayList<>();
    }
    this.nodeIds.add(nodeIdsItem);
    return this;
  }

  /**
   * Nodes to which we should apply the update to. Note all the selected nodes are updated in parallel.
   * @return nodeIds
   */
  @javax.annotation.Nullable
  public List<String> getNodeIds() {
    return nodeIds;
  }

  public void setNodeIds(@javax.annotation.Nullable List<String> nodeIds) {
    this.nodeIds = nodeIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplySoftwareUpdateRequest applySoftwareUpdateRequest = (ApplySoftwareUpdateRequest) o;
    return Objects.equals(this.applyAll, applySoftwareUpdateRequest.applyAll) &&
        Objects.equals(this.nodeIds, applySoftwareUpdateRequest.nodeIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyAll, nodeIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplySoftwareUpdateRequest {\n");
    sb.append("    applyAll: ").append(toIndentedString(applyAll)).append("\n");
    sb.append("    nodeIds: ").append(toIndentedString(nodeIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("applyAll", "nodeIds"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplySoftwareUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplySoftwareUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplySoftwareUpdateRequest is not found in the empty JSON string", ApplySoftwareUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplySoftwareUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplySoftwareUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("nodeIds") != null && !jsonObj.get("nodeIds").isJsonNull() && !jsonObj.get("nodeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeIds` to be an array in the JSON string but got `%s`", jsonObj.get("nodeIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplySoftwareUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplySoftwareUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplySoftwareUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplySoftwareUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplySoftwareUpdateRequest>() {
           @Override
           public void write(JsonWriter out, ApplySoftwareUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplySoftwareUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplySoftwareUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplySoftwareUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to ApplySoftwareUpdateRequest
   */
  public static ApplySoftwareUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplySoftwareUpdateRequest.class);
  }

  /**
   * Convert an instance of ApplySoftwareUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

