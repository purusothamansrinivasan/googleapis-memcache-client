/*
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata;
import org.openapitools.client.model.GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SloMetadata contains resources required for proper SLO classification of the instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T15:33:03.624322+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata {
  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  @javax.annotation.Nullable
  private List<GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PER_SLI_ELIGIBILITY = "perSliEligibility";
  @SerializedName(SERIALIZED_NAME_PER_SLI_ELIGIBILITY)
  @javax.annotation.Nullable
  private GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility perSliEligibility;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  @javax.annotation.Nullable
  private String tier;

  public GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata() {
  }

  public GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata nodes(@javax.annotation.Nullable List<GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata> nodes) {
    this.nodes = nodes;
    return this;
  }

  public GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata addNodesItem(GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * Optional. List of nodes. Some producers need to use per-node metadata to calculate SLO. This field allows such producers to publish per-node SLO meta data, which will be consumed by SSA Eligibility Exporter and published in the form of per node metric to Monarch.
   * @return nodes
   */
  @javax.annotation.Nullable
  public List<GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata> getNodes() {
    return nodes;
  }

  public void setNodes(@javax.annotation.Nullable List<GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata> nodes) {
    this.nodes = nodes;
  }


  public GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata perSliEligibility(@javax.annotation.Nullable GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility perSliEligibility) {
    this.perSliEligibility = perSliEligibility;
    return this;
  }

  /**
   * Get perSliEligibility
   * @return perSliEligibility
   */
  @javax.annotation.Nullable
  public GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility getPerSliEligibility() {
    return perSliEligibility;
  }

  public void setPerSliEligibility(@javax.annotation.Nullable GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility perSliEligibility) {
    this.perSliEligibility = perSliEligibility;
  }


  public GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata tier(@javax.annotation.Nullable String tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Name of the SLO tier the Instance belongs to. This name will be expected to match the tiers specified in the service SLO configuration. Field is mandatory and must not be empty.
   * @return tier
   */
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }

  public void setTier(@javax.annotation.Nullable String tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata googleCloudSaasacceleratorManagementProvidersV1SloMetadata = (GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata) o;
    return Objects.equals(this.nodes, googleCloudSaasacceleratorManagementProvidersV1SloMetadata.nodes) &&
        Objects.equals(this.perSliEligibility, googleCloudSaasacceleratorManagementProvidersV1SloMetadata.perSliEligibility) &&
        Objects.equals(this.tier, googleCloudSaasacceleratorManagementProvidersV1SloMetadata.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodes, perSliEligibility, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata {\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    perSliEligibility: ").append(toIndentedString(perSliEligibility)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("nodes", "perSliEligibility", "tier"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata is not found in the empty JSON string", GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata.validateJsonElement(jsonArraynodes.get(i));
          };
        }
      }
      // validate the optional field `perSliEligibility`
      if (jsonObj.get("perSliEligibility") != null && !jsonObj.get("perSliEligibility").isJsonNull()) {
        GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.validateJsonElement(jsonObj.get("perSliEligibility"));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata>() {
           @Override
           public void write(JsonWriter out, GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata
   */
  public static GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.class);
  }

  /**
   * Convert an instance of GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

