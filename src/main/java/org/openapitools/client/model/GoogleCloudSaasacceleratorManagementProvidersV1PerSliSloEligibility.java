/*
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerSliSloEligibility is a mapping from an SLI name to eligibility.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T15:33:03.624322+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility {
  public static final String SERIALIZED_NAME_ELIGIBILITIES = "eligibilities";
  @SerializedName(SERIALIZED_NAME_ELIGIBILITIES)
  @javax.annotation.Nullable
  private Map<String, GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility> eligibilities = new HashMap<>();

  public GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility() {
  }

  public GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility eligibilities(@javax.annotation.Nullable Map<String, GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility> eligibilities) {
    this.eligibilities = eligibilities;
    return this;
  }

  public GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility putEligibilitiesItem(String key, GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility eligibilitiesItem) {
    if (this.eligibilities == null) {
      this.eligibilities = new HashMap<>();
    }
    this.eligibilities.put(key, eligibilitiesItem);
    return this;
  }

  /**
   * An entry in the eligibilities map specifies an eligibility for a particular SLI for the given instance. The SLI key in the name must be a valid SLI name specified in the Eligibility Exporter binary flags otherwise an error will be emitted by Eligibility Exporter and the oncaller will be alerted. If an SLI has been defined in the binary flags but the eligibilities map does not contain it, the corresponding SLI time series will not be emitted by the Eligibility Exporter. This ensures a smooth rollout and compatibility between the data produced by different versions of the Eligibility Exporters. If eligibilities map contains a key for an SLI which has not been declared in the binary flags, there will be an error message emitted in the Eligibility Exporter log and the metric for the SLI in question will not be emitted.
   * @return eligibilities
   */
  @javax.annotation.Nullable
  public Map<String, GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility> getEligibilities() {
    return eligibilities;
  }

  public void setEligibilities(@javax.annotation.Nullable Map<String, GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility> eligibilities) {
    this.eligibilities = eligibilities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility googleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility = (GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility) o;
    return Objects.equals(this.eligibilities, googleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.eligibilities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eligibilities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility {\n");
    sb.append("    eligibilities: ").append(toIndentedString(eligibilities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("eligibilities"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility is not found in the empty JSON string", GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility>() {
           @Override
           public void write(JsonWriter out, GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility
   */
  public static GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.class);
  }

  /**
   * Convert an instance of GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

