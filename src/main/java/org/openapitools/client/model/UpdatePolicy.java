/*
 * Cloud Memorystore for Memcached API
 * Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DenyMaintenancePeriod;
import org.openapitools.client.model.MaintenanceWindow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Maintenance policy applicable to instance updates.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-25T15:33:03.624322+05:30[Asia/Kolkata]", comments = "Generator version: 7.15.0")
public class UpdatePolicy {
  /**
   * Optional. Relative scheduling channel applied to resource.
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    UPDATE_CHANNEL_UNSPECIFIED("UPDATE_CHANNEL_UNSPECIFIED"),
    
    EARLIER("EARLIER"),
    
    LATER("LATER"),
    
    WEEK1("WEEK1"),
    
    WEEK2("WEEK2"),
    
    WEEK5("WEEK5");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  @javax.annotation.Nullable
  private ChannelEnum channel;

  public static final String SERIALIZED_NAME_DENY_MAINTENANCE_PERIODS = "denyMaintenancePeriods";
  @SerializedName(SERIALIZED_NAME_DENY_MAINTENANCE_PERIODS)
  @javax.annotation.Nullable
  private List<DenyMaintenancePeriod> denyMaintenancePeriods = new ArrayList<>();

  public static final String SERIALIZED_NAME_WINDOW = "window";
  @SerializedName(SERIALIZED_NAME_WINDOW)
  @javax.annotation.Nullable
  private MaintenanceWindow window;

  public UpdatePolicy() {
  }

  public UpdatePolicy channel(@javax.annotation.Nullable ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Optional. Relative scheduling channel applied to resource.
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(@javax.annotation.Nullable ChannelEnum channel) {
    this.channel = channel;
  }


  public UpdatePolicy denyMaintenancePeriods(@javax.annotation.Nullable List<DenyMaintenancePeriod> denyMaintenancePeriods) {
    this.denyMaintenancePeriods = denyMaintenancePeriods;
    return this;
  }

  public UpdatePolicy addDenyMaintenancePeriodsItem(DenyMaintenancePeriod denyMaintenancePeriodsItem) {
    if (this.denyMaintenancePeriods == null) {
      this.denyMaintenancePeriods = new ArrayList<>();
    }
    this.denyMaintenancePeriods.add(denyMaintenancePeriodsItem);
    return this;
  }

  /**
   * Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. The protocol supports zero-to-many such periods, but the current SLM Rollout implementation only supports zero-to-one.
   * @return denyMaintenancePeriods
   */
  @javax.annotation.Nullable
  public List<DenyMaintenancePeriod> getDenyMaintenancePeriods() {
    return denyMaintenancePeriods;
  }

  public void setDenyMaintenancePeriods(@javax.annotation.Nullable List<DenyMaintenancePeriod> denyMaintenancePeriods) {
    this.denyMaintenancePeriods = denyMaintenancePeriods;
  }


  public UpdatePolicy window(@javax.annotation.Nullable MaintenanceWindow window) {
    this.window = window;
    return this;
  }

  /**
   * Get window
   * @return window
   */
  @javax.annotation.Nullable
  public MaintenanceWindow getWindow() {
    return window;
  }

  public void setWindow(@javax.annotation.Nullable MaintenanceWindow window) {
    this.window = window;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePolicy updatePolicy = (UpdatePolicy) o;
    return Objects.equals(this.channel, updatePolicy.channel) &&
        Objects.equals(this.denyMaintenancePeriods, updatePolicy.denyMaintenancePeriods) &&
        Objects.equals(this.window, updatePolicy.window);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, denyMaintenancePeriods, window);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePolicy {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    denyMaintenancePeriods: ").append(toIndentedString(denyMaintenancePeriods)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("channel", "denyMaintenancePeriods", "window"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePolicy is not found in the empty JSON string", UpdatePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        ChannelEnum.validateJsonElement(jsonObj.get("channel"));
      }
      if (jsonObj.get("denyMaintenancePeriods") != null && !jsonObj.get("denyMaintenancePeriods").isJsonNull()) {
        JsonArray jsonArraydenyMaintenancePeriods = jsonObj.getAsJsonArray("denyMaintenancePeriods");
        if (jsonArraydenyMaintenancePeriods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("denyMaintenancePeriods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `denyMaintenancePeriods` to be an array in the JSON string but got `%s`", jsonObj.get("denyMaintenancePeriods").toString()));
          }

          // validate the optional field `denyMaintenancePeriods` (array)
          for (int i = 0; i < jsonArraydenyMaintenancePeriods.size(); i++) {
            DenyMaintenancePeriod.validateJsonElement(jsonArraydenyMaintenancePeriods.get(i));
          };
        }
      }
      // validate the optional field `window`
      if (jsonObj.get("window") != null && !jsonObj.get("window").isJsonNull()) {
        MaintenanceWindow.validateJsonElement(jsonObj.get("window"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePolicy>() {
           @Override
           public void write(JsonWriter out, UpdatePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePolicy
   * @throws IOException if the JSON string is invalid with respect to UpdatePolicy
   */
  public static UpdatePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePolicy.class);
  }

  /**
   * Convert an instance of UpdatePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

